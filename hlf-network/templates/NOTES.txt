# Helm install finished.
# Let's work on setting up the url rewrite in coredns so the orderer/peer nodes can find each other
export INTERNAL_CORE_DNS_IP=$(kubectl get --namespace kube-system -o jsonpath='{.spec.clusterIP}{"\n"}' services internal-dns); echo $INTERNAL_CORE_DNS_IP
sed -i -e s/INTERNAL_CORE_DNS_IP/$INTERNAL_CORE_DNS_IP/g kube-common/kube-dns-configmap-update.yaml
# Change HLF_STUB_DOMAIN to use your own domain, such as example.com, mycompany.net, et. al.
export HLF_STUB_DOMAIN=example.com
sed -i -e s/HLF_STUB_DOMAIN/$HLF_STUB_DOMAIN/g kube-common/kube-dns-configmap-update.yaml

# Verify the values have been replaced correctly
cat kube-common/kube-dns-configmap-update.yaml
# Be sure to add additional lines for additional stubdomains to point to the same IP
# Then
kubectl apply -f kube-common/kube-dns-configmap-update.yaml

# In your domain DNS management tool, make sure to point following domains to the static ip
{{- range $i, $org := $.Values.OrdererOrgs }}
{{ $org.Domain | lower }}
{{- end }} {{- /* OrdererOrgs */ -}}{{""}}

{{- range $i, $org := $.Values.PeerOrgs }}
{{- if $.Values.hlfLoadBalancePeerNodes }}
peer.{{ $org.Domain | lower }}
{{- end }}
{{- range $i, $host := $org.Specs }}
{{ $host.Hostname | lower }}.{{ $org.Domain | lower }}
{{- end }} {{- /* org.Specs */ -}}
{{- end }} {{- /* PeerOrgs */ -}}{{""}}

# Wait for the load balancer to show up and the certificates to be provisioned. This might take 15 minutes.
