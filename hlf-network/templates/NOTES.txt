# Helm install finished.
# Let's work on setting up the url rewrite in coredns so the orderer/peer nodes can find each other
export INTERNAL_CORE_DNS_IP=$(kubectl get --namespace kube-system -o jsonpath='{.spec.clusterIP}{"\n"}' services internal-dns); echo $INTERNAL_CORE_DNS_IP
sed -i -e s/INTERNAL_CORE_DNS_IP/$INTERNAL_CORE_DNS_IP/g kube-common/kube-dns-configmap-update.yaml
# Change HLF_STUB_DOMAIN to use your own domain, such as example.com, mycompany.net, et. al.
export HLF_STUB_DOMAIN=example.com
sed -i -e s/HLF_STUB_DOMAIN/$HLF_STUB_DOMAIN/g kube-common/kube-dns-configmap-update.yaml

# Verify the values have been replaced correctly
cat kube-common/kube-dns-configmap-update.yaml
# Be sure to add additional lines for additional stubdomains to point to the same IP
# Then
kubectl apply -f kube-common/kube-dns-configmap-update.yaml

# Get the reserved static IP
gcloud compute addresses describe hlf-load-balancer-static-ip --global --format='value(address)'

# In your domain DNS management tool, make sure to point following domains to the static ip
{{- range $i, $org := $.Values.OrdererOrgs }}
{{- if $.Values.hlfLoadBalancePeerNodes }}
{{ $org.Domain | lower }}
{{- end }}
{{- range $i, $host := $org.Specs }}
{{ $host.Hostname | lower }}.{{ $org.Domain | lower }}
{{- end }} {{- /* org.Specs */ -}}
{{- end }} {{- /* OrdererOrgs */ -}}{{""}}

{{- range $i, $org := $.Values.PeerOrgs }}
{{- if $.Values.hlfLoadBalancePeerNodes }}
peer.{{ $org.Domain | lower }}
{{- end }}
{{- range $i, $host := $org.Specs }}
{{ $host.Hostname | lower }}.{{ $org.Domain | lower }}
{{- end }} {{- /* org.Specs */ -}}
{{- end }} {{- /* PeerOrgs */ -}}{{""}}

{{- if $.Values.hlfCAEnabled }}
{{- range $i, $org := .Values.PeerOrgs }}
ca.{{ $org.Domain | lower }}
{{- end }} {{- /* PeerOrgs */ -}}{{""}}
{{- end }}

# Now Run GCP Deployment Script for the load balancer
sudo apt update
sudo apt install python3 python3-dev python3-venv python-pip
cd hlf-load-balancer
python3 -m venv venv
source venv/bin/activate
pip install --upgrade pip
pip install --upgrade wheel
pip install kubernetes
pip install google-api-python-client
# Double Check gcloud setting
gcloud auth list
gcloud config list
# Change values in hlflb-config.yaml
python3 setup.py
gcloud deployment-manager deployments list
gcloud deployment-manager deployments delete hlf-load-balancer
gcloud deployment-manager deployments create hlf-load-balancer --config=hlflb.yaml

# Wait for the load balancer to show up and the certificates to be provisioned. This might take 15 minutes.
